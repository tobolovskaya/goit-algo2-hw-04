from trie import Trie

class Homework(Trie):
    def count_words_with_suffix(self, pattern: str) -> int:
        """–ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ª—ñ–≤, —â–æ –∑–∞–∫—ñ–Ω—á—É—é—Ç—å—Å—è –Ω–∞ –∑–∞–¥–∞–Ω–∏–π —Å—É—Ñ—ñ–∫—Å."""
        if not isinstance(pattern, str):
            raise ValueError("Pattern must be a string")

        all_words = self._get_all_words(self.root, "")  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Å–ª—ñ–≤ –∑ Trie
        print(f"–£—Å—ñ —Å–ª–æ–≤–∞ —É Trie: {all_words}")  # üîç –î–æ–¥–∞–Ω–æ –¥–ª—è –¥–µ–±–∞–≥—É
        return sum(1 for word in all_words if word.endswith(pattern))

    def has_prefix(self, prefix: str) -> bool:
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —ñ—Å–Ω—É—î —Ö–æ—á–∞ –± –æ–¥–Ω–µ —Å–ª–æ–≤–æ —ñ–∑ –∑–∞–¥–∞–Ω–∏–º –ø—Ä–µ—Ñ—ñ–∫—Å–æ–º."""
        if not isinstance(prefix, str):
            raise ValueError("Prefix must be a string")

        node = self.root
        for char in prefix:
            if char not in node.children:
                return False
            node = node.children[char]
        return True

    def _get_all_words(self, node, prefix):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∑–±–∏—Ä–∞—î –≤—Å—ñ —Å–ª–æ–≤–∞ –≤ Trie."""
        words = []
        if getattr(node, "is_end_of_word", False):  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –∫—ñ–Ω–µ—Ü—å —Å–ª–æ–≤–∞
            words.append(prefix)

        for char, child in node.children.items():
            words.extend(self._get_all_words(child, prefix + char))

        return words


if __name__ == "__main__":
    trie = Homework()
    words = ["apple", "application", "banana", "cat"]
    for i, word in enumerate(words):
        trie.put(word, i)

    # üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∞—Ü—é—î Trie
    print("–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–æ–¥–∞–Ω–∏—Ö —Å–ª—ñ–≤...")
    for word in words:
        assert trie.has_prefix(word[:2]) == True  # –ú–∞—î –∑–Ω–∞—Ö–æ–¥–∏—Ç–∏ –ø—Ä–µ—Ñ—ñ–∫—Å–∏

    # üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –ø–æ—à—É–∫—É –∑–∞ —Å—É—Ñ—ñ–∫—Å–æ–º
    print("–¢–µ—Å—Ç—É—î–º–æ count_words_with_suffix...")
    assert trie.count_words_with_suffix("e") == 1  # apple
    assert trie.count_words_with_suffix("ion") == 1  # application
    assert trie.count_words_with_suffix("a") == 1  # banana
    assert trie.count_words_with_suffix("at") == 1  # cat

    # üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–µ—Ñ—ñ–∫—Å–∏
    print("–¢–µ—Å—Ç—É—î–º–æ has_prefix...")
    assert trie.has_prefix("app") == True  # apple, application
    assert trie.has_prefix("bat") == False
    assert trie.has_prefix("ban") == True  # banana
    assert trie.has_prefix("ca") == True  # cat

    print("‚úÖ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
